#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState

from markers import *
from funciones import *

if __name__ == '__main__':

  rospy.init_node("testForwardKinematics")
  pub = rospy.Publisher('joint_states', JointState, queue_size=1)
  bmarker = BallMarker(color['GREEN'])
  #marker = FrameMarker()

  # Joint names
  jnames = ['base_link__link1', 'link1__link2','link2__link3', 'link3__link4', 'link4__link5','link5__link6','link6__link7','link7__end_link']
  # Joint Configuration
  #q = [0.8, 0.6, 0.8, 0.6, 0.8, 0.6, 0.05, 0.6]
  #q = [0,0,0,0,0,0,0,0]
  q = [0.5, 0.6, 0.8, 1.8, 0.8, 0.8, 0.05, 0.0]
  # End effector with respect to the base
  T = fkine_kuka(q)
  print( np.round(T, 3))
  bmarker.position(T)
  
  x0 = TF2xyzquat(T)
  #marker.setPose(x0)

  # Object (message) whose type is JointState
  jstate = JointState()
  # Set values to the message
  jstate.header.stamp = rospy.Time.now()
  jstate.name = jnames
  # Add the head joint value (with value 0) to the joints
  jstate.position = q

  # Loop rate (in Hz)
  rate = rospy.Rate(20)
  # Continuous execution loop
  while not rospy.is_shutdown():
    # Current time (needed for ROS)     
    jstate.header.stamp = rospy.Time.now()
    # Publish the message
    pub.publish(jstate)
    bmarker.publish()
    #marker.publish()
    # Wait for the next iteration
    rate.sleep()