#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState

from markers import *
from funciones import *

if __name__ == '__main__':

    # Initialize the node
    rospy.init_node("testKineControlPosition")
    print('starting motion ... ')
    # Publisher: publish to the joint_states topic
    pub = rospy.Publisher('joint_states', JointState, queue_size=10)
    # Files for the logs
    fxcurrent = open("/home/benja/proy_funda/src/kuka_iiwa_description/src/xcurrent.txt", "w")                
    fxdesired = open("/home/benja/proy_funda/src/kuka_iiwa_description/src/xdesired.txt", "w")
    fq = open("/home/benja/proy_funda/src/kuka_iiwa_description/src/q.txt", "w")

    # Markers for the current and desired positions
    bmarker_current  = BallMarker(color['RED'])
    bmarker_desired = BallMarker(color['GREEN'])
    marker = FrameMarker()

    # Joint names
    jnames = ['base_link__link1', 'link1__link2','link2__link3', 'link3__link4', 'link4__link5','link5__link6','link6__link7','link7__end_link']

    # Desired position
    #xd = np.array([0.84, 0.125, 0.249])
    #xd = np.array([0.44, 0.22, 0.5])
    xd = np.array([0.6, -0.5, 0.6, 0.0, 1.0, 0.0, 0.0])
    # Initial configuration
    q0 = np.array([0.4, 0.2, 0.6, -0.1, -0.5, 0.1, 0.05, 0.2])
    #q0 = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
    #q0 = np.array([0.8, 1.0, 0.8, 0.6, 0.8, 0.5, 0.0, 0.6])
    # Resulting initial position (end effector with respect to the base link)
    T = fkine_kuka(q0)
    x0 = T[0:3,3]

    # Red marker shows the achieved position
    bmarker_current.xyz(x0)
    # Green marker shows the desired position
    bmarker_desired.xyz(xd[0:3])

    marker.setPose(xd[0:3])

    # Instance of the JointState message
    jstate = JointState()
    # Values of the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    jstate.position = q0

    # Frequency (in Hz) and control period 
    freq = 50
    dt = 1.0/freq
    rate = rospy.Rate(freq)

    # Initial joint configuration
    q = copy(q0)
    k = 0.001
    count = 0
    # Main loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Kinematic control law for position (complete here)
        # -----------------------------
        # Cinemática directa dada la configuración actual q
        T = fkine_kuka(q)  # Cinemática directa para obtener la posición actual del efector final
        pos = T[0:3,3]  # NECESITO LA CINEMÁTICA DIRECTA
        ori = T[0:3,0:3]
        rot = Quaternion(matrix=ori)
        rot = np.array([rot.w, rot.x, rot.y, rot.z])
        x = np.hstack((pos,rot))
        e = PoseError(x,xd)  # Error de posición

        # Calcular la Jacobiana (matriz de derivadas) del robot en la posición actual
        J = jacobian_pose(q)
        
        # Verificar si la posición deseada se alcanzó
        if np.linalg.norm(e[0:3]) < 0.001:
            print("Posición deseada alcanzada.")
            break
        
        # Derivada del error
        de = -k*e
        # Variación de la configuración articular
        dq = np.linalg.pinv(J).dot(de)
        # Integración para obtener la nueva configuración articular
        q = q + dt*dq
        q[6] = np.clip(q[6], 0.0, 0.071)
        # Actualizar las articulaciones
        # -----------------------------
        count = count + 1 
        if(count > 1000):
            print('Max number of iterations reached')
            break
        
        # Log values                                                      
        fxcurrent.write(str(x[0])+' '+str(x[1]) +' '+str(x[2])+'\n')
        fxdesired.write(str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
        fq.write(str(q[0])+" "+str(q[1])+" "+str(q[2])+" "+str(q[3])+" "+str(q[4])+" "+str(q[5])+" "+str(q[6])+" "+str(q[7])+"\n")
        
        # Publish the message
        jstate.position = q
        pub.publish(jstate)
        bmarker_desired.xyz(xd)
        bmarker_current.xyz(x)
        marker.publish()
        # Wait for the next iteration
        rate.sleep()

    print('ending motion ...')
    fxcurrent.close()
    fxdesired.close()
    fq.close()
