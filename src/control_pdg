#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
from markers import *
from funciones import *
from roslib import packages

import rbdl

if __name__ == '__main__':

  rospy.init_node("control_pdg")
  pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
  bmarker_actual  = BallMarker(color['RED'])
  bmarker_deseado = BallMarker(color['GREEN'])
  # Archivos donde se almacenara los datos
  fxcurrent = open("/home/benja/proy_funda/src/kuka_iiwa_description/src/control_pdg_graph/xcurrent.txt", "w")                
  fxdesired = open("/home/benja/proy_funda/src/kuka_iiwa_description/src/control_pdg_graph/xdesired.txt", "w")
  fqcurrent = open("/home/benja/proy_funda/src/kuka_iiwa_description/src/control_pdg_graph/qcurrent.txt", "w")
  fqdesired = open("/home/benja/proy_funda/src/kuka_iiwa_description/src/control_pdg_graph/qdesired.txt", "w")
  
  # Nombres de las articulaciones
  jnames = ['base_link__link1', 'link1__link2','link2__link3', 'link3__link4', 'link4__link5','link5__link6','link6__link7','link7__end_link']
  # Objeto (mensaje) de tipo JointState
  jstate = JointState()
  # Valores del mensaje
  jstate.header.stamp = rospy.Time.now()
  jstate.name = jnames
  
  # =============================================================
  # Configuracion articular inicial (en radianes)
  q = np.array([0.4, 0.2, 0.6, -0.1, -0.5, 0.1, 0.07, 0.2])
  # Velocidad inicial
  dq = np.array([0., 0., 0., 0., 0., 0., 0., 0.])
  # Configuracion articular deseada
  qdes = np.array([1.0, -0.4, 0.5, 0.4, -0.5, 0.3, 0.0, -0.3])
  # =============================================================
  
  # Posicion resultante de la configuracion articular deseada
  xdes = fkine_kuka(qdes)[0:3,3]
  # Copiar la configuracion articular en el mensaje a ser publicado
  jstate.position = q
  pub.publish(jstate)
  
  # Modelo RBDL
  modelo = rbdl.loadModel("/home/benja/proy_funda/src/kuka_iiwa_description/urdf/lbr_iiwa7_r800.urdf")
  ndof   = modelo.q_size     # Grados de libertad
  
  # Frecuencia del envio (en Hz)
  freq = 20
  dt = 1.0/freq
  rate = rospy.Rate(freq)
  
  # Simulador dinamico del robot
  robot = Robot(q, dq, ndof, dt)

  # Se definen las ganancias del controlador
  valores = 0.1*np.array([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])
  Kp = np.diag(valores)
  Kd = 0.35*np.sqrt(Kp)
  
  # Bucle de ejecucion continua
  t = 0.0
  while not rospy.is_shutdown():
  
    # Leer valores del simulador
    q  = robot.read_joint_positions()
    dq = robot.read_joint_velocities()
    # Posicion actual del efector final
    x = fkine_kuka(q)[0:3,3]
    # Tiempo actual (necesario como indicador para ROS)
    jstate.header.stamp = rospy.Time.now()

    # Almacenamiento de datos
    fxcurrent.write(str(x[0])+' '+str(x[1])+' '+str(x[2])+'\n')
    fxdesired.write(str(xdes[0])+' '+str(xdes[1])+' '+str(xdes[2])+'\n')
    fqcurrent.write(str(q[0])+' '+str(q[1])+' '+ str(q[2])+' '+ str(q[3])+' '+str(q[4])+' '+str(q[5])+' '+str(q[6])+' '+str(q[7])+'\n ')
    fqdesired.write(str(qdes[0])+' '+str(qdes[1])+' '+ str(qdes[2])+' '+ str(qdes[3])+' '+str(qdes[4])+' '+str(qdes[5])+' '+str(q[6])+' '+str(q[7])+'\n ')

    # ----------------------------
    # Control dinamico (COMPLETAR)
    # ----------------------------
    u = np.zeros(ndof)   # Reemplazar por la ley de control

    zeros = np.zeros(ndof)  #Vector de ceros
    g_1    = np.zeros(ndof)
    q[6] = np.clip(q[6], 0.0, 0.071)
    rbdl.InverseDynamics(modelo, q, zeros, zeros, g_1)  # Vector de gravedad
   
    g_1 = np.round(g_1,4)
    u = g_1 + Kp.dot(qdes - q) - Kd.dot(dq)   # Ley de Control (PD + Gravedad)
    
    # Simulacion del robot
    robot.send_command(u)

    # Verificación si se llegó al punto deseado
    if (np.linalg.norm(qdes - q) < 0.01):
        print("Se llegó al punto deseado")
        break

    # Publicacion del mensaje
    jstate.position = q
    pub.publish(jstate)
    bmarker_deseado.xyz(xdes)
    bmarker_actual.xyz(x)
    t = t+dt
    # Esperar hasta la siguiente  iteracion
    rate.sleep()

  fqcurrent.close()
  fqdesired.close()
  fxcurrent.close()
  fxdesired.close()
